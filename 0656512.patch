diff --git a/hello.s b/hello.s
deleted file mode 100755
index 563d047..0000000
--- a/hello.s
+++ /dev/null
@@ -1,26 +0,0 @@
-    .code16
-    .global _start
-    .text
-_start:
-    mov %cs, %ax
-    mov %ax, %ds
-    mov %ax, %es
- 
-    mov $0x03, %ah      # read cursor pos
-    xor %bh, %bh
-    int $0x10
-     
-    mov $24, %cx
-    mov $0x0007, %bx        # page 0, attribute 7 (normal)
-    #lea    msg1, %bp
-    mov     $msg1, %bp
-    mov $0x1301, %ax        # write string, move cursor
-    int $0x10
-end_hello:
-    jmp end_hello
- 
-msg1:
-    .byte 13,10
-    .ascii "Hello OSDI Lab2!"
-    .byte 13,10
-	
\ No newline at end of file
diff --git a/linux-0.11/Makefile b/linux-0.11/Makefile
index ddb5be1..cfd6058 100644
--- a/linux-0.11/Makefile
+++ b/linux-0.11/Makefile
@@ -34,19 +34,19 @@ MATH	=kernel/math/math.a
 LIBS	=lib/lib.a
 
 .c.s:
-@$(CC) $(CFLAGS) -S -o $*.s $<
+	@$(CC) $(CFLAGS) -S -o $*.s $<
 .s.o:
-@$(AS)  -o $*.o $<
+	@$(AS)  -o $*.o $<
 .c.o:
-@$(CC) $(CFLAGS) -c -o $*.o $<
+	@$(CC) $(CFLAGS) -c -o $*.o $<
 
 all:	Image	
 
-Image: boot/bootsect boot/setup tools/system
+Image: boot/bootsect boot/setup tools/system boot/hello
 	@cp -f tools/system system.tmp
 	@strip system.tmp
 	@objcopy -O binary -R .note -R .comment system.tmp tools/kernel
-	@tools/build.sh boot/bootsect boot/setup tools/kernel Image $(ROOT_DEV)
+	@tools/build.sh boot/bootsect boot/setup tools/kernel Image $(ROOT_DEV) boot/hello
 	@rm system.tmp
 	@rm tools/kernel -f
 	@sync
@@ -57,6 +57,8 @@ disk: Image
 boot/head.o: boot/head.s
 	@make head.o -C boot/
 
+boot/hello: boot/hello.s
+	@make hello -C boot/
 tools/system:	boot/head.o init/main.o \
 		$(ARCHIVES) $(DRIVERS) $(MATH) $(LIBS)
 	@$(LD) $(LDFLAGS) boot/head.o init/main.o \
@@ -100,7 +102,7 @@ tmp.s:	boot/bootsect.s tools/system
 	@cat boot/bootsect.s >> tmp.s
 
 clean:
-	@rm -f Image System.map tmp_make core boot/bootsect boot/setup
+	@rm -f Image System.map tmp_make core boot/bootsect boot/setup boot/hello
 	@rm -f init/*.o tools/system boot/*.o typescript* info bochsout.txt
 	@for i in mm fs kernel lib boot; do make clean -C $$i; done 
 info:
diff --git a/linux-0.11/boot/Makefile b/linux-0.11/boot/Makefile
index c68e252..0b7bc0a 100644
--- a/linux-0.11/boot/Makefile
+++ b/linux-0.11/boot/Makefile
@@ -2,7 +2,7 @@ include ../Makefile.header
 
 LDFLAGS	+= -Ttext 0
 
-all: bootsect setup
+all: bootsect setup hello
 
 bootsect: bootsect.s
 	@$(AS) -o bootsect.o bootsect.s
@@ -18,5 +18,10 @@ setup: setup.s
 head.o: head.s
 	@$(AS) -o head.o head.s
 
+hello: hello.s
+	@$(AS) -o hello.o hello.s
+	@$(LD) $(LDFLAGS) -o hello hello.o
+	@objcopy -R .pdr -R .comment -R.note -S -O binary hello
+
 clean:
-	@rm -f bootsect bootsect.o setup setup.o head.o
+	@rm -f bootsect bootsect.o setup setup.o head.o hello hello.o
diff --git a/linux-0.11/boot/bootsect.s b/linux-0.11/boot/bootsect.s
index 94b1114..d8369b4 100644
--- a/linux-0.11/boot/bootsect.s
+++ b/linux-0.11/boot/bootsect.s
@@ -24,7 +24,7 @@
 # read errors will result in a unbreakable loop. Reboot by hand. It
 # loads pretty fast by getting whole sectors at a time whenever possible.
 
-	.global _start, begtext, begdata, begbss, endtext, enddata, endbss
+	.global _start, load_setup, begtext, begdata, begbss, endtext, enddata, endbss
 	.text
 	begtext:
 	.data
@@ -62,12 +62,44 @@ go:	mov	%cs, %ax
 	mov	%ax, %ss
 	mov	$0xFF00, %sp		# arbitrary value >>512
 
+Read_keyboard:
+	mov	$0x00, %ah 	#get keyboard
+	int	$0x16
+	
+	mov	$0x0e, %ah 	#display the char on the screen
+	mov	$0x07, %bl 	#foreground color
+	int	$0x10	
+	
+	cmp	$0x31, %al	#asc 1
+	je	load_setup	
+	cmp	$0x32, %al	#asc 2
+	je	load_hello
+	jmp	Read_keyboard
+
+load_hello:
+	mov	$0x0000, %dx		# drive 0, head 0
+	mov	$0x0002, %cx		# sector 2, track 0, read position in the disk
+	mov	$0x0000, %bx		# relative address = 0
+	mov	$SYSSEG, %ax		# absolute address, put disk data in the memory, write position in the memory
+	mov	%ax, %es	
+	.equ    AX, 0x0200+1		# AH=02 read, and how many sectors
+	mov     $AX, %ax		# service 2, nr of sectors
+	int	$0x13			# read it
+	jnc	load_hello_ok		# ok - continue
+	mov	$0x0000, %dx
+	mov	$0x0000, %ax		# reset the diskette
+	int	$0x13
+	jmp	load_hello
+
+load_hello_ok:
+	ljmp	$SYSSEG, $0
+
+
 # load the setup-sectors directly after the bootblock.
 # Note that 'es' is already set up.
-
 load_setup:
 	mov	$0x0000, %dx		# drive 0, head 0
-	mov	$0x0002, %cx		# sector 2, track 0
+	mov	$0x0003, %cx		# sector 3, track 0
 	mov	$0x0200, %bx		# address = 512, in INITSEG
 	.equ    AX, 0x0200+SETUPLEN
 	mov     $AX, %ax		# service 2, nr of sectors
@@ -111,7 +143,6 @@ ok_load_setup:
 	mov	%ax, %es		# segment of 0x010000
 	call	read_it
 	call	kill_motor
-
 # After that we check which root-device to use. If the device is
 # defined (#= 0), nothing is done and the given device is used.
 # Otherwise, either /dev/PS0 (2,28) or /dev/at0 (2,8), depending
@@ -147,7 +178,7 @@ root_defined:
 #
 # in:	es - starting address segment (normally 0x1000)
 #
-sread:	.word 1+ SETUPLEN	# sectors read of current track
+sread:	.word 2+ SETUPLEN	# sectors read of current track
 head:	.word 0			# current head
 track:	.word 0			# current track
 
diff --git a/linux-0.11/boot/hello.s b/linux-0.11/boot/hello.s
new file mode 100755
index 0000000..deebaff
--- /dev/null
+++ b/linux-0.11/boot/hello.s
@@ -0,0 +1,27 @@
+    .code16
+    .global _start
+    .text
+_start:
+    mov %cs, %ax
+    mov %ax, %ds
+    mov %ax, %es
+ 
+    mov $0x03, %ah      # read cursor pos
+    xor %bh, %bh
+    int $0x10
+     
+    mov $20, %cx #the # of words on the screen
+    mov $0x0007, %bx        # page 0, attribute 7 (normal)
+    #lea    msg1, %bp
+    mov     $msg1, %bp
+    mov $0x1301, %ax        # write string, move cursor
+    int $0x10
+end_hello:
+    ljmp $0x9000, $0
+    jmp end_hello
+ 
+msg1:
+    .byte 13,10 #\r\n
+    .ascii "Hello OSDI Lab2!"
+    .byte 13,10
+	
diff --git a/linux-0.11/include/linux/sched.h b/linux-0.11/include/linux/sched.h
index 6b6e243..9f0d3df 100644
--- a/linux-0.11/include/linux/sched.h
+++ b/linux-0.11/include/linux/sched.h
@@ -1,7 +1,7 @@
 #ifndef _SCHED_H
 #define _SCHED_H
 
-#define NR_TASKS 0
+#define NR_TASKS 5
 #define HZ 100
 
 #define FIRST_TASK task[0]
diff --git a/linux-0.11/init/main.c b/linux-0.11/init/main.c
index 8660535..df12461 100644
--- a/linux-0.11/init/main.c
+++ b/linux-0.11/init/main.c
@@ -137,7 +137,7 @@ void main(void)		/* This really IS void, no error here. */
 	hd_init();
 	floppy_init();
 	sti();
-	panic(""); 
+	//panic(""); 
 	move_to_user_mode();
 	if (!fork()) {		/* we count on this going ok */
 		init();
diff --git a/linux-0.11/tools/build.sh b/linux-0.11/tools/build.sh
old mode 100644
new mode 100755
index d542a8f..f35df6d
--- a/linux-0.11/tools/build.sh
+++ b/linux-0.11/tools/build.sh
@@ -7,8 +7,10 @@ bootsect=$1
 setup=$2
 system=$3
 IMAGE=$4
-root_dev=$5
+root_dev=$6
+hello_img=$5
 
+echo "$5"
 # Set the biggest sys_size
 # Changes from 0x20000 to 0x30000 by tigercn to avoid oversized code.
 SYS_SIZE=$((0x3000*16))
@@ -26,15 +28,20 @@ fi
 [ ! -f "$bootsect" ] && echo "there is no bootsect binary file there" && exit -1
 dd if=$bootsect bs=512 count=1 of=$IMAGE 2>&1 >/dev/null
 
+
+# Write hello_img (one sector) to stdout
+[ ! -f "$hello_img" ] && echo "there is no hello binary file there" && exit -1
+dd if=$hello_img seek=1 bs=512 count=1 of=$IMAGE 2>&1 >/dev/null
+#
+
 # Write setup(4 * 512bytes, four sectors) to stdout
 [ ! -f "$setup" ] && echo "there is no setup binary file there" && exit -1
-dd if=$setup seek=1 bs=512 count=4 of=$IMAGE 2>&1 >/dev/null
+dd if=$setup seek=2 bs=512 count=4 of=$IMAGE 2>&1 >/dev/null
 
 # Write system(< SYS_SIZE) to stdout
 [ ! -f "$system" ] && echo "there is no system binary file there" && exit -1
 system_size=`wc -c $system |cut -d" " -f1`
 [ $system_size -gt $SYS_SIZE ] && echo "the system binary is too big" && exit -1
-dd if=$system seek=5 bs=512 count=$((2888-1-4)) of=$IMAGE 2>&1 >/dev/null
-
-# Set "device" for the root image file
+dd if=$system seek=6 bs=512 count=$((2888-1-4)) of=$IMAGE 2>&1 >/dev/null
+#Set "device" for the root image file
 echo -ne "\x$DEFAULT_MINOR_ROOT\x$DEFAULT_MAJOR_ROOT" | dd ibs=1 obs=1 count=2 seek=508 of=$IMAGE conv=notrunc  2>&1 >/dev/null
diff --git a/osdi.img b/osdi.img
index f700274..d9e28fb 100644
Binary files a/osdi.img and b/osdi.img differ
